// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    
    // x = 0
    And16(a=x, b[0]=false, b[2]=false, b[3]=false, b[4]=false, b[5]=false, b[6]=false, b[7]=false, b[8]=false, b[9]=false, b[10]=false, b[11]=false, b[12]=false, b[13]=false, b[14]=false, b[15]=false, out=out1);
    
    // x = !x
    Not16(in=x, out=out2);
    
    // y = 0
    And16(a=y, b[0]=false, b[2]=false, b[3]=false, b[4]=false, b[5]=false, b[6]=false, b[7]=false, b[8]=false, b[9]=false, b[10]=false, b[11]=false, b[12]=false, b[13]=false, b[14]=false, b[15]=false, out=out3);
    
    // y = !y
    Not16(in=y, out=out4);
    
    // x + y
    Add16(a=x, b=y, out=out5);
    
    // x & y
    And16(a=x, b=y, out=out6);
    
    
    // Collecting the flags
    
    Not(in=f, out=f1);
    
    Or16(a[0]=false, a[1]=false, a[2]=false, a[3]=false, a[4]=false, a[5]=false, a[6]=false, a[7]=false, a[8]=false, a[9]=false, a[10]=false, a[11]=false, a[12]=false, a[13]=false, a[14]=false, a[15]=false, b[0]=zx, b[1]=nx, b[2]=zy, b[3]=ny, b[4]=f, b[5]=f1, out[0..2]=selx);
    
    

    Mux8Way16(a=out1, b=out2, c=out3, d=out4, e=out5, f=out6, sel=selx, out=outf);
    
    // !out
    Not16(in=outf, out=outfn);    
    Mux16(a=outf, b=outfn, sel=no, out=out);
    
    // if (out == 0) set zr = 1
    //And16(a=outf, b[0]=true, b[1]=true, b[2]=true, b[3]=true, b[4]=true, b[5]=true, b[6]=true, b[7]=true, b[8]=true, b[9]=true, b[10]=true, b[11]=true, b[12]=true, b[13]=true, b[14]=true, b[15]=true, out[0]=zro);
    //Not(in=zro, out=zr);
    Not16(in=outf, out=noutf);
    Inc16(in=noutf, out=inoutf);
    Not16(in=inoutf, out=ninoutf);
    And16(a=ninoutf, b[0]=true, b[1]=true, b[2]=true, b[3]=true, b[4]=true, b[5]=true, b[6]=true, b[7]=true, b[8]=true, b[9]=true, b[10]=true, b[11]=true, b[12]=true, b[13]=true, b[14]=true, b[15]=true, out[15]=zr);
    
    
    // if (out < 0) set ng = 1
    And16(a=outf, b[0]=true, b[1]=true, b[2]=true, b[3]=true, b[4]=true, b[5]=true, b[6]=true, b[7]=true, b[8]=true, b[9]=true, b[10]=true, b[11]=true, b[12]=true, b[13]=true, b[14]=true, b[15]=true, out[15]=ng);
}
